# -*- encoding : utf-8 -*-
require 'digest/sha1'

class User < ActiveRecord::Base
  rolify
  include FriendshipAspect
  include MessageAspect
  include BalanceAspect
  include CharmAspect
  include Authentication
  include Authentication::ByPassword
  include Authentication::ByCookieToken
  include Authorization::AasmRoles
  include AuthenticationAspect
  include RatingAspect
  include TicketAspect
  include FavoriteAspect
  # ---------------------------------------
  # The following code has been generated by role_requirement.
  # You may wish to modify it to suit your need
  has_many :notifications
  has_many :posts
  has_many :pictures
  has_many :lists
  has_and_belongs_to_many :badges
  has_one :profile
  has_many :reports, as: :target
  has_many :records, class_name: "Report"

  has_many :quest_logs
  has_many :client_applications
  has_many :tokens,
    -> { order("authorized_at desc").includes(:client_application) },
    class_name: "OauthToken"

  # attr_protected :login, :activation_code, :state

  def role_names
    Rails.cache.fetch("roles:#{id}", :expires_in => 1.hour)do
      roles.collect{|r|r.name}.join(' ')
    end
  end

  def is_admin?
    has_role?('admin')
  end

  def ensure_profile
    profile ? profile : create_profile
  end

  def charm
    Rails.cache.fetch("charm#{id}", :expires_in => 1.day){
      total_articles_score + followers.count
    }
  end

  def stat
    return @user_stat if @user_stat
    us = UserStat.find_by_user_id id
    if us
      @user_stat = us
    else
      @user_stat = UserStat.create :user_id => id
    end
    @user_stat
  end

  def clear_notification *args
    Notification.delete_all(:user_id => id, :key => args.join('.'))
  end

  #TODO:send notifications

  has_attached_file :avatar,
                    :styles => { #:medium => "320x320>",
                                 #:small  => "64x64#",
                                 #:thumb  => "32x32#" }
                                 :medium => "200x200>",
                                 :thumb => '32x32#' }
  validates_attachment_content_type :avatar,
    :content_type =>
      ['image/jpeg',
       'image/gif',
       'image/png',
       'image/pjpeg',
       'image/bmp',
       'image/x-portable-bitmap'
       ], :unless => Proc.new {|model| model.avatar}
     validates_attachment_size :avatar, :less_than => 2.megabytes, :unless => Proc.new {|model| model.avatar}

  # HACK HACK HACK -- how to do attr_accessible from here?
  # prevents a user from submitting a crafted form that bypasses activation
  # anything else you want your user to change should be added here.
  attr_accessible :login, :email, :name, :password, :password_confirmation,
    :avatar

  has_many :articles
  has_many :comments

  has_many :name_logs

  def rename new_name
    transaction do
      lock!
      raise 'Duplicate name' if self.class.find_by_login new_name
      name_logs.create :name=>login
      self.login=new_name
      save!
    end
  end

  def has_badge?(badge)
    case badge
    when Badge
      badges.find_by_id(badge.id)
    when Fixnum
      badges.find_by_id(badge)
    when String
      badges.find_by_name(badge)
    end
  end
######}}}}}}}
  protected

  end



